<!DOCTYPE html>
<html lang="vi">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<title>Game Rắn Ăn Mồi</title>
<style>
  body {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #333;
    margin: 0;
    touch-action: manipulation;
    -webkit-user-select: none;
  }
  h1 {
    color: white;
    margin-bottom: 10px;
    text-align: center;
  }
  canvas {
    background-color: #000;
    border: 2px solid #555;
  }
  .control-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .side-controls {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin: 0 20px;
  }
  .arrow {
    width: 60px;
    height: 60px;
    background-color: #555;
    border: none;
    border-radius: 10px;
    color: white;
    font-size: 30px;
    font-weight: bold;
  }
  .arrow:active {
    background-color: #888;
  }
  .bottom-controls {
    display: flex;
    justify-content: center;
    gap: 40px;
    margin-top: 15px;
  }
  @media (max-width: 600px) {
    .arrow {
      width: 50px;
      height: 50px;
      font-size: 24px;
    }
  }
</style>
</head>
<body>

<h1>Game Rắn Ăn Mồi</h1>

<div class="control-wrapper">
  <div class="side-controls">
    <button class="arrow" id="left">←</button>
  </div>

  <canvas id="gameCanvas" width="400" height="400"></canvas>

  <div class="side-controls">
    <button class="arrow" id="right">→</button>
  </div>
</div>

<div class="bottom-controls">
  <button class="arrow" id="up">↑</button>
  <button class="arrow" id="down">↓</button>
</div>

<script>
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");
const gridSize = 20;
const canvasSize = canvas.width;

let snake = [{ x: 200, y: 200 }];
let direction = { x: 0, y: 0 };
let newDirection = { x: 0, y: 0 };
let food = randomFood();
let score = 0;
let gameInterval = null;

// --- GAME LOGIC ---
function randomFood() {
  return {
    x: Math.floor(Math.random() * (canvasSize / gridSize)) * gridSize,
    y: Math.floor(Math.random() * (canvasSize / gridSize)) * gridSize,
  };
}

function drawSquare(x, y, color) {
  ctx.fillStyle = color;
  ctx.fillRect(x, y, gridSize, gridSize);
}

function drawGame() {
  ctx.clearRect(0, 0, canvasSize, canvasSize);
  snake.forEach(part => drawSquare(part.x, part.y, "lime"));
  drawSquare(food.x, food.y, "red");

  ctx.fillStyle = "white";
  ctx.font = "20px Arial";
  ctx.fillText(`Điểm: ${score}`, 10, 30);
}

function moveSnake() {
  const head = { x: snake[0].x + direction.x, y: snake[0].y + direction.y };

  // Va chạm tường
  if (head.x < 0 || head.x >= canvasSize || head.y < 0 || head.y >= canvasSize) {
    resetGame();
    return;
  }

  // Va chạm thân
  for (let i = 1; i < snake.length; i++) {
    if (head.x === snake[i].x && head.y === snake[i].y) {
      resetGame();
      return;
    }
  }

  snake.unshift(head);

  // Ăn mồi
  if (head.x === food.x && head.y === food.y) {
    score++;
    food = randomFood();
  } else {
    snake.pop();
  }
}

function resetGame() {
  clearInterval(gameInterval);
  snake = [{ x: 200, y: 200 }];
  direction = { x: 0, y: 0 };
  newDirection = { x: 0, y: 0 };
  score = 0;
  startGame();
}

// --- ĐIỀU KHIỂN ---
function updateDirection(x, y) {
  if (x !== 0 && direction.x === 0) newDirection = { x: x * gridSize, y: 0 };
  if (y !== 0 && direction.y === 0) newDirection = { x: 0, y: y * gridSize };
}

// --- SỰ KIỆN PHÍM ---
window.addEventListener("keydown", e => {
  if (e.key === "ArrowLeft") updateDirection(-1, 0);
  else if (e.key === "ArrowRight") updateDirection(1, 0);
  else if (e.key === "ArrowUp") updateDirection(0, -1);
  else if (e.key === "ArrowDown") updateDirection(0, 1);
});

// --- SỰ KIỆN CẢM ỨNG (iPhone/iPad) ---
["left", "right", "up", "down"].forEach(id => {
  const btn = document.getElementById(id);
  btn.addEventListener("click", () => {
    if (id === "left") updateDirection(-1, 0);
    if (id === "right") updateDirection(1, 0);
    if (id === "up") updateDirection(0, -1);
    if (id === "down") updateDirection(0, 1);
  });
  btn.addEventListener("touchstart", e => {
    e.preventDefault();
    btn.click();
  });
});

// --- GAME LOOP ---
function startGame() {
  if (gameInterval) clearInterval(gameInterval);
  gameInterval = setInterval(() => {
    direction = newDirection;
    moveSnake();
    drawGame();
  }, 120);
}

startGame();
</script>

</body>
</html>
